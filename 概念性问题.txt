1.多线程：线程是CPU独立运行和独立调度的基本单位；指的是这个程序（一个进程）运行时产生了不止一个线程
2.进程:进程是资源分配的基本单位；进程具有独立的空间地址，一个进程崩溃后，在保护模式下不会对其它进程产生影响。
3.并行：多个cpu实例或者多台机器同时执行一段处理逻辑，是真正的同时。
4.并发：通过cpu调度算法，让用户看上去同时执行，实际上从cpu操作层面不是真正的同时。并发往往在场景中有公用的资源，那么针对这个公用的资源往往产生瓶颈，我们会用TPS或者QPS来反应这个系统的处理能力。
5.线程安全：经常用来描绘一段代码。指在并发的情况之下，该代码经过多线程使用，线程的调度顺序不影响任何结果。这个时候使用多线程，我们只需要关注系统的内存，cpu是不是够用即可。反过来，线程不安全就意味着线程的调度顺序会影响最终结果，如不加事务的转账代码：
6.同步：Java中的同步指的是通过人为的控制和调度，保证共享资源的多线程访问成为线程安全，来保证结果的准确。如上面的代码简单加入@synchronized关键字。在保证结果准确的同时，提高性能，才是优秀的程序。线程安全的优先级高于性能。
7.异步交互：指发送一个请求,不需要等待返回,随时可以再发送下一个请求，即不需要等待。
8.同步交互：指发送一个请求,需要等待返回,然后才能够发送下一个请求，有个等待过程；
9.反射机制是在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法；对于任意一个对象，都能够调用它的任意一个方法和属性；这种动态获取的信息以及动态调用对象的方法的功能称为java语言的反射机制。
10.工厂模式:工厂模式就是不用自己创建对象,由工厂帮忙创建对象.工厂模式有三大类:分别是简单工厂模式,工厂方法模式,抽象工厂模式.简单工厂模式算是工厂方法模式的特例. 工厂方法与抽象工厂的区别:工厂方法模式只有一个抽象产品类，而抽象工厂模式有多个.工厂方法模式的具体工厂类只能创建一个具体产品类的实例，而抽象工厂模式可以创建多个。
11.单例设计模式:在这个类被创建后，只可能产生一个实例供外部访问，并且提供一个全局的访问点。单例模式有两种:饿汉式(线程安全,效率低)和饱汉式(线程不安全,效率高).饿汉式是当类被加载就会创建实例对象.饱汉式是用到的时候才会加载.
12.拦截器与过滤器的区别 ：
    1.拦截器是基于java的反射机制的，而过滤器是基于函数回调。
    2.拦截器不依赖与servlet容器，过滤器依赖与servlet容器。
    3.拦截器只能对action请求起作用，而过滤器则可以对几乎所有的请求起作用。
    4.拦截器可以访问action上下文、值栈里的对象，而过滤器不能访问。
    5.在action的生命周期中，拦截器可以多次被调用，而过滤器只能在容器初始化时被调用一次
13.面向切面编程:在运行时，动态地将代码切入到类的指定方法、指定位置上的编程思想就是面向切面的编程
14.代理机制的作用是：为其它对象提供一种代理以控制对这个对象的访问。
15.类只能单继承,接口可以多实现.类表示的是这个对象是什么,接口表示的是这个对象能干什么
16.事务的原子性表示事务执行过程中的任何失败都将导致事务所做的任何修改失效.一致性表示当事务执行失败时,所有被该事务影像的数据都应该恢复到执行前的状态.隔离性表示在事务执行过程中对数据的修改,在事务提交之前对其他事务不可见.持久性表示已提交的数据在事务执行失败时,数据的状态都应该正确
17.悲观锁:顾名思义，就是很悲观，每次去拿数据的时候都认为别人会修改，所以每次在拿数据的时候都会上锁，这样别人想拿这个数据就会block直到它拿到锁。
18.乐观锁: 顾名思义，就是很乐观，每次去拿数据的时候都认为别人不会修改，所以不会上锁，但是在更新的时候会判断一下在此期间别人有没有去更新这个数据，可以使用版本号等机制。
19.构造方法是一种特殊的方法，它是一个与类同名且没有返回值类型的方法。在Java中,任何变量在被使用前都必须先设置初值.Java提供了为类的成员变量赋初值的专门方法。构造器总是伴随着new操作一起调用.有参构造和无参构造